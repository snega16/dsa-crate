Description - 

You are given the head of a singly linked-list. The list can be represented as:

L0 → L1 → … → Ln - 1 → Ln
Reorder the list to be on the following form:

L0 → Ln → L1 → Ln - 1 → L2 → Ln - 2 → …
You may not modify the values in the list's nodes. Only nodes themselves may be changed.

 Example 1:

Input: head = [1,2,3,4]
Output: [1,4,2,3]


Code -

def reorderList(self, head: Optional[ListNode]) -> None:
        """
        Do not return anything, modify head in-place instead.
        """
        if not head or not head.next:
            return
        mid = Solution.middleNode(head)
        s = head
        e = Solution.reverseLLIter(mid)

        # re-arrange
        while s and e:
            temp = s.next
            s.next = e
            s = temp
            
            temp = e.next
            e.next = s
            e = temp
        
        # next of tail to null
        if s:
            s.next = None
            
    def reverseLLIter(head):
        if not head:
            return head
        previous = None
        present = head
        next = present.next

        while present:
            present.next = previous
            previous = present
            present = next
            if next:
                next = next.next
        head = previous
        return head
        
    def middleNode(head):
        slow = head
        fast = head
        while fast != None and fast.next != None:
            slow = slow.next
            fast = fast.next.next
        return slow
        
