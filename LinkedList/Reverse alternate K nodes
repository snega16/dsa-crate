Description - 
Given a linked list, write a function to reverse every alternate k nodes (where k is an input to the function) in an efficient way. Give the complexity of your algorithm.

Example: 

Inputs:   1->2->3->4->5->6->7->8->9->NULL and k = 3
Output:   3->2->1->4->5->6->9->8->7->NULL. 

Code - 

def reverseAlternateKGroup(self, head, k):
    if k==1 or not head:
        return head

    curr = head
    prev = None

    while curr:
        last = prev
        newEnd = curr
        next = curr.next

        for i in range(k):
            if curr:
                curr.next = prev
                prev = curr
                curr = next
                if next:
                    next = next.next

        if last:
            last.next = prev
        else:
            head = prev

        newEnd.next = curr

        # skip next k nodes
        for i in range(k):
            if curr:
                prev = curr
                curr = curr.next
    return head
