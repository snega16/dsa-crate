Description - 
Given the head of a linked list, reverse the nodes of the list k at a time, and return the modified list.

k is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of k then left-out nodes, in the end, should remain as it is.

You may not alter the values in the list's nodes, only nodes themselves may be changed.

 Example 1:

Input: head = [1,2,3,4,5], k = 2
Output: [2,1,4,3,5]

Code - 

def reverseKGroup(self, head: Optional[ListNode], k: int) -> Optional[ListNode]:
        if k==1 or not head:
            return head

        curr = head
        prev = None
        
        # run the loop till count becomes 0, so remaining nodes less than k are not reversed
        length = Solution.getLength(head)
        count = length // k

        while count>0:
            last = prev
            newEnd = curr
            next = curr.next

            for i in range(k):
                if curr:
                    curr.next = prev
                    prev = curr
                    curr = next
                    if next:
                        next = next.next

            if last:
                last.next = prev
            else:
                head = prev

            newEnd.next = curr

            # now the newEnd becomes the previous for next part
            prev = newEnd
            count-=1

        return head

def getLength(head):
    node = head
    length = 0
    while node:
        length+=1
        node = node.next
    return length
